#! /usr/bin/python

# Concurrent: Concurrent throttled command execution
# gerry.steele@gmail.com
#
# Thu Sep 23 2010

# Copyright 2010 Gerry Steele. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without modification, are
# permitted provided that the following conditions are met:
#
#    1. Redistributions of source code must retain the above copyright notice, this list of
#       conditions and the following disclaimer.
#
#    2. Redistributions in binary form must reproduce the above copyright notice, this list
#       of conditions and the following disclaimer in the documentation and/or other materials
#       provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY <COPYRIGHT HOLDER> ``AS IS'' AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
# FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# The views and conclusions contained in the software and documentation are those of the
# authors and should not be interpreted as representing official policies, either expressed
# or implied, of Gerry Steele

import sys
import subprocess
import shlex
import time

def main(argv):

    if len(argv) < 4:
        print "Incorrect usage. Not enough parameters."
        print "\ti.e. ./concurrent <num procs> \"command and args>\" <files....>"
        print "\te.g. ./concurrent 8 \"mycommand -e 100 -f %f\" *.txt"
        print "NB: Note the quotes *must* exist around the command and its arguments"
        print "NB: %f is the placeholder for where you wish the file to be intperolated in the command"
        sys.exit(-1)

    app = argv[2] # command
    files = argv[3:] # files to process
    print "cmd: " + app
    print "files: " + str(files)
    
    step = int(argv[1]) 
    
    for x in range(0, len(files), step):
        print files[x:x+step]
        run_procs(app,files[x:x+step])

def run_procs(app, files):
    procs = []
    f_outs = []
    
    c = 0
    # run processes on files
    for f in files:
        cmd = str(app)
        #interpolate
        cmd = cmd.replace("%f", str(f))
        print "running -> " + cmd
        f_outs.append(open(f + ".stdout", 'w')) 
        # do the running
        procs.append(subprocess.Popen(shlex.split(cmd), 
                                      stdout=f_outs[c], 
                                      stderr=subprocess.STDOUT))
        c += 1

    #reap processes
    while len(procs) != 0:
        for p in procs:
            if p.poll() != None:
                procs.remove(p)
            else:
                time.sleep(0.00005)
    # close output files
    for fptr in f_outs:
        fptr.close()
    
    print "Quitting"

if __name__ == '__main__':
    main(sys.argv)
